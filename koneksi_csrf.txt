Berikut contoh implementasi CSRF token satu kali pakai dengan secret key dan MySQL dalam PHP:

**1.  Buat tabel keamanan di database MySQL:**

```sql
CREATE TABLE if not exists csrf_tokens (
  id INT PRIMARY KEY AUTO_INCREMENT,
  token VARCHAR(255) UNIQUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

**2.  Buat PHP file untuk eksekusi kode berikut:**

```php
<?php

// Koneksi database
$conn = new mysqli("localhost", "username", "password", "database_name");
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Fungsi untuk menghasilkan token CSRF baru
function generateCSRFToken() {
  $token = bin2hex(random_bytes(32));
  return $token;
}

// Simpan token CSRF ke database
function storeCSRFToken($token) {
  global $conn;
  $sql = "INSERT INTO csrf_tokens (token) VALUES ('$token')";
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

// Validasi token CSRF
function validateCSRFToken($token) {
  global $conn;
  $sql = "SELECT id FROM csrf_tokens WHERE token = '$token'";
  $result = $conn->query($sql);
  return $result->num_rows > 0;
}

//  Contoh penggunaan

// Generate token baru
$csrfToken = generateCSRFToken();
storeCSRFToken($csrfToken);

// Simpan token dalam cookie (saat user login)
setcookie("csrf_token", $csrfToken, time() + (86400 * 30), "/", ".example.com", false, true);

// cek token CSRF di halaman yang memerlukan validasi
if (!isset($_COOKIE["csrf_token"])) {
  // Token tidak ditemukan, mungkin request tidak dibuat dari tes session cookie
  // Kembalikan pesan kesalahan atau redirect ke halaman login
}

$storedToken = $_COOKIE["csrf_token"];

if (!validateCSRFToken($storedToken)) {
  // Token cacat, mungkin request diperbaiki
  // Kembalikan pesan kesalahan atau redirect ke halaman login
}

// Proses permintaan yang aman


?>
```

**Penjelasan:**

1.  **Koneksi database:** Menentukan koneksi ke database MySQL Anda.
2.  **generateCSRFToken():** Fungsi untuk menghasilkan token aleatoire unik, dikonversi ke heksadesimal menggunakan `bin2hex` dan `random_bytes`.
3.  **storeCSRFToken():** Menambahkan token ke tabel `csrf_tokens` di database.
4.  **validateCSRFToken():** Memeriksa apakah token yang dikirimkan dalam permintaan sama dengan token yang tersimpan di dalam database.
5.  **Contoh Penggunaan:**
    *   Menggunakan `setcookie()` untuk menyimpan token CSRF dalam cookie saat pengguna login.
    *   Memeriksa keberadaan cookie `csrf_token` dan validasinya sebelum melanjutkan proses permintaan.
    *   Anda perlu menyesuaikan jalur dan domain cookie dengan pengaturan domain website Anda.


**Penting:**

*  Ganti `username`, `password`, dan `database_name` dengan kredensial database Anda.
*   Pastikan pengaturan keamanan kerangka kerja PHP Anda benar.
*   Penting untuk menjaga secret key Anda rahasia.

**Saran Tambahan:**

*   Gunakan teknik lain seperti token cookie `HttpOnly` dan flag `Secure` untuk keamanan tambahan.
*   Batasi waktu hidup token CSRF untuk mengurangi risiko jika ada kebocoran. Anda bisa mengatur waktu hidup token dengan menggunakan `time() + (86400 * 30)` di kode PHP untuk masa berlaku 30 hari sebagai contoh.






